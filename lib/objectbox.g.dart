// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/aluno_entity.dart';
import 'entities/curso_entity.dart';
import 'entities/customer.dart';
import 'entities/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8065523260670356841),
      name: 'User',
      lastPropertyId: const IdUid(3, 2930307136848990727),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6825483601247716039),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2790353629296227908),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2930307136848990727),
            name: 'date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2243833519229211509),
      name: 'Customer',
      lastPropertyId: const IdUid(2, 7209539000418629986),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8401990026814681617),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7209539000418629986),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'orders', srcEntity: 'ShopOrder', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 8321449215676790169),
      name: 'ShopOrder',
      lastPropertyId: const IdUid(3, 5741908930822365397),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7979423741325606120),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4247274544854639010),
            name: 'price',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5741908930822365397),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4872098119267584806),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6780618282305653600),
      name: 'Aluno',
      lastPropertyId: const IdUid(3, 1192022557620829718),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6151201747563405049),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 894793285348396673),
            name: 'nome',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 1528934981337461978),
            name: 'cursos',
            targetId: const IdUid(5, 5664174551536185749))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5664174551536185749),
      name: 'Curso',
      lastPropertyId: const IdUid(4, 2792508266882323261),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2213534200169598695),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6277407680548101750),
            name: 'descricao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1351191747815397165),
            name: 'ementa',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 4900099418623958611),
            name: 'alunos',
            targetId: const IdUid(4, 6780618282305653600))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 5664174551536185749),
      lastIndexId: const IdUid(3, 295359575442703549),
      lastRelationId: const IdUid(4, 4900099418623958611),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [4186448477475805397, 295359575442703549],
      retiredPropertyUids: const [2792508266882323261, 1192022557620829718],
      retiredRelationUids: const [4082876253422871273, 9022239115287382316],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    User: EntityDefinition<User>(
        model: _entities[0],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.date?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = User(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              date: dateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(dateValue))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[1],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              RelInfo<ShopOrder>.toOneBacklink(3, object.id,
                  (ShopOrder srcObject) => srcObject.customer): object.orders
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<Customer>(
              object.orders,
              store,
              RelInfo<ShopOrder>.toOneBacklink(
                  3, object.id, (ShopOrder srcObject) => srcObject.customer));
          return object;
        }),
    ShopOrder: EntityDefinition<ShopOrder>(
        model: _entities[2],
        toOneRelations: (ShopOrder object) => [object.customer],
        toManyRelations: (ShopOrder object) => {},
        getId: (ShopOrder object) => object.id,
        setId: (ShopOrder object, int id) {
          object.id = id;
        },
        objectToFB: (ShopOrder object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.price);
          fbb.addInt64(2, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ShopOrder(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              price:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.customer.attach(store);
          return object;
        }),
    Aluno: EntityDefinition<Aluno>(
        model: _entities[3],
        toOneRelations: (Aluno object) => [],
        toManyRelations: (Aluno object) =>
            {RelInfo<Aluno>.toMany(3, object.id): object.cursos},
        getId: (Aluno object) => object.id,
        setId: (Aluno object, int id) {
          object.id = id;
        },
        objectToFB: (Aluno object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Aluno(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              nome: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          InternalToManyAccess.setRelInfo<Aluno>(
              object.cursos, store, RelInfo<Aluno>.toMany(3, object.id));
          return object;
        }),
    Curso: EntityDefinition<Curso>(
        model: _entities[4],
        toOneRelations: (Curso object) => [],
        toManyRelations: (Curso object) =>
            {RelInfo<Curso>.toMany(4, object.id): object.alunos},
        getId: (Curso object) => object.id,
        setId: (Curso object, int id) {
          object.id = id;
        },
        objectToFB: (Curso object, fb.Builder fbb) {
          final descricaoOffset = fbb.writeString(object.descricao);
          final ementaOffset = fbb.writeString(object.ementa);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descricaoOffset);
          fbb.addOffset(2, ementaOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Curso(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              ementa: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          InternalToManyAccess.setRelInfo<Curso>(
              object.alunos, store, RelInfo<Curso>.toMany(4, object.id));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[0].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[0].properties[1]);

  /// see [User.date]
  static final date = QueryIntegerProperty<User>(_entities[0].properties[2]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[1].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[1].properties[1]);
}

/// [ShopOrder] entity fields to define ObjectBox queries.
class ShopOrder_ {
  /// see [ShopOrder.id]
  static final id = QueryIntegerProperty<ShopOrder>(_entities[2].properties[0]);

  /// see [ShopOrder.price]
  static final price =
      QueryIntegerProperty<ShopOrder>(_entities[2].properties[1]);

  /// see [ShopOrder.customer]
  static final customer =
      QueryRelationToOne<ShopOrder, Customer>(_entities[2].properties[2]);
}

/// [Aluno] entity fields to define ObjectBox queries.
class Aluno_ {
  /// see [Aluno.id]
  static final id = QueryIntegerProperty<Aluno>(_entities[3].properties[0]);

  /// see [Aluno.nome]
  static final nome = QueryStringProperty<Aluno>(_entities[3].properties[1]);

  /// see [Aluno.cursos]
  static final cursos =
      QueryRelationToMany<Aluno, Curso>(_entities[3].relations[0]);
}

/// [Curso] entity fields to define ObjectBox queries.
class Curso_ {
  /// see [Curso.id]
  static final id = QueryIntegerProperty<Curso>(_entities[4].properties[0]);

  /// see [Curso.descricao]
  static final descricao =
      QueryStringProperty<Curso>(_entities[4].properties[1]);

  /// see [Curso.ementa]
  static final ementa = QueryStringProperty<Curso>(_entities[4].properties[2]);

  /// see [Curso.alunos]
  static final alunos =
      QueryRelationToMany<Curso, Aluno>(_entities[4].relations[0]);
}
